#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;

/*

国王的金矿(背包)
有一个国家发现了5座金矿，每座金矿的黄金储量不同，需要参与挖掘的工人数也不同。
参与挖矿工人的总数是10人。
每座金矿要么全挖，要么不挖，不能派出一半人挖取一半金矿。
要求用程序求解出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？【价值/重量】
1、400金/5人   2、500金/5人   3、200金/3人    4、300金/4人    5、350金/3人
------------------------------------------------------------------------
国王在他的国家发现了n座金矿，为了描述方便，我们给他们从1到n编号。

对于第i个金矿，需要投入w(i)个的费用，能挖出来c(i)个单位的金子。

现在国王想开挖这些金矿，但是最多只有M个RMB用于投入，问最多可以挖出来多少单位的金子。
第一行两个整数，分别为N和M。

接下来N行每行两个整数，第i+1行为w(i)和c(i)。
输入：
3 10
8 5
3 4
6 3
输出：
7
------------------------------------------------------------------------
思想：
把题目类比成01背包问题
n件物品 每件物品重量w[i]价值为c[i]。现有容量为V的背包，选物品使得物品的总价值最大


类比：
金矿就是物品，五座金矿就是五件物品，每件物品的需要人数就是重量，含金量就是价值
挖矿工人数量就是背包体积V


*/
const int maxn = 1010;
int w[maxn];
int c[maxn];
int dp[maxn];


int main(int argc, char *argv[]) {
	int n, V;
	while (scanf("%d %d", &n, &V) != EOF) {
		for (int i = 0; i < n; i++) {
			scanf("%d %d", &w[i], &c[i]);
		}
		// 边界
		for (int v = 0; v <= V; v++) {
			dp[v] = 0;
		} 
		// 状态转移方程
		for (int i = 0; i < n; i++) {
			for (int v = V; v >= w[i]; v--) {
				dp[v] = max(dp[v], dp[v-w[i]] + c[i]);
			}
		}
		printf("%d\n", dp[V]);
	}
}